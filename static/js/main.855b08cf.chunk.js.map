{"version":3,"sources":["components/LeftSide/Card.jsx","covidSlice.js","components/LeftSide/Header.jsx","components/LeftSide/Chart.jsx","components/LeftSide/LeftSide.jsx","components/RightSide/SortOptions.jsx","components/RightSide/Country.jsx","components/RightSide/RightSide.jsx","App.js","store.js","index.js"],"names":["Card","covidInfo","useSelector","state","covid","className","separator","start","duration","end","today","recovered","date","total","confirmed","deaths","covidSlice","createSlice","name","initialState","infoByDate","numbDate","country","listCountry","options","reducers","changeInfo","action","payload","getInfoByDate","changeListCountry","changeOption","option","actions","reducer","Header","dispatch","useDispatch","useState","countryISO","setCountryISO","countryName","setCountryName","allCountryInfos","setAllCountryInfos","useEffect","axios","get","then","res","dataInfo","data","forEach","item","push","countryInfo","cases","todayCases","todayDeaths","todayRecovered","catch","err","console","log","iso","timeline","Object","keys","i","getInfoChart","FormControl","Select","value","onChange","e","target","find","info","iso2","MenuItem","map","index","Chart","dataChart","labels","datasets","label","fill","backgroundColor","borderColor","optionsChart","scales","yAxes","ticks","beginAtZero","type","display","position","plugins","title","text","fullSize","color","font","size","LeftSide","SortOptions","changeSort","defaultValue","Country","src","flag","alt","RightSide","changeList","list","App","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.855b08cf.chunk.js","sourcesContent":["import CountUp from 'react-countup';\r\nimport { useSelector } from 'react-redux';\r\nimport '../css/Card.css';\r\n\r\nexport default function Card() {\r\n    const covidInfo = useSelector(state => state.covid)\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card__status card__status--recovered\">\r\n                <h3>Recovered</h3>\r\n                <div className=\"card__today\">\r\n                    <span>Today:</span> <strong> +<CountUp separator=\",\" start={0} duration={2} end={covidInfo.today.recovered} /></strong>\r\n                    <p>{covidInfo.date}</p>\r\n                    <br />\r\n                </div>\r\n                <div className=\"card__total\">\r\n                    <span>Total: </span>\r\n                    <strong> <CountUp separator=\",\" start={0} duration={2} end={covidInfo.total.recovered} /></strong>\r\n                </div>\r\n            </div>\r\n            <div className=\"card__status card__status--confrimed\">\r\n                <h3>Confirmed</h3>\r\n                <div className=\"card__today\">\r\n                    <span>Today:</span> <strong> +<CountUp separator=\",\" start={0} duration={2} end={covidInfo.today.confirmed} /></strong>\r\n                    <p>{covidInfo.date}</p>\r\n                    <br />\r\n                </div>\r\n                <div className=\"card__total\">\r\n                    <span>Total: </span> <strong><CountUp separator=\",\" start={0} duration={2} end={covidInfo.total.confirmed} /></strong>\r\n                </div>\r\n            </div>\r\n            <div className=\"card__status card__status--deaths\">\r\n                <h3>Deaths</h3>\r\n                <div className=\"card__today\">\r\n                    <span>Today:</span> <strong> +<CountUp separator=\",\" start={0} duration={2} end={covidInfo.today.deaths} /></strong>\r\n                    <p>{covidInfo.date}</p>\r\n                    <br />\r\n                </div>\r\n                <div className=\"card__total\">\r\n                    <span>Total: </span> <strong><CountUp separator=\",\" start={0} duration={2} end={covidInfo.total.deaths} /></strong>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nconst covidSlice = createSlice({\r\n    name: 'covid',\r\n    initialState: {\r\n        today: {\r\n            confirmed: 0,\r\n            recovered: 0,\r\n            deaths: 0,\r\n        },\r\n        infoByDate: {\r\n            numbDate: 0,\r\n            date: [],\r\n            confirmed: [],\r\n            recovered: [],\r\n            deaths: [],\r\n        },\r\n        total: {\r\n            confirmed: 0,\r\n            recovered: 0,\r\n            deaths: 0,\r\n        },\r\n        date: null,\r\n        country: 'all',\r\n        listCountry: {\r\n            options: 'case',\r\n            country: [],\r\n        },\r\n    },\r\n    reducers: {\r\n        changeInfo(state, action) {\r\n            return {\r\n                ...state,\r\n                today: {\r\n                    ...state.today,\r\n                    confirmed: action.payload.today.confirmed,\r\n                    recovered: action.payload.today.recovered,\r\n                    deaths: action.payload.today.deaths,\r\n                },\r\n                total: {\r\n                    ...state.total,\r\n                    confirmed: action.payload.total.confirmed,\r\n                    recovered: action.payload.total.recovered,\r\n                    deaths: action.payload.total.deaths,\r\n                },\r\n                country: action.payload.country,\r\n            }\r\n        },\r\n        getInfoByDate(state, action) {\r\n            return {\r\n                ...state,\r\n                infoByDate: {\r\n                    ...state.infoByDate,\r\n                    numbDate: action.payload.numbDate,\r\n                    date: action.payload.date,\r\n                    confirmed: action.payload.confirmed,\r\n                    recovered: action.payload.recovered,\r\n                    deaths: action.payload.deaths,\r\n                }\r\n            }\r\n        },\r\n        changeListCountry(state, action) {\r\n            return {\r\n                ...state,\r\n                listCountry: {\r\n                    ...state.listCountry,\r\n                    country: [action.payload.country],\r\n                },\r\n            }\r\n        },\r\n        changeOption(state, action) {\r\n            return {\r\n                ...state,\r\n                listCountry: {\r\n                    ...state.listCountry,\r\n                    options: action.payload.option,\r\n                },\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nconst { actions, reducer } = covidSlice;\r\nexport const { changeInfo, getInfoByDate, changeListCountry, changeOption } = actions;\r\nexport default reducer;","import { FormControl, MenuItem, Select } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport '../css/Header.css';\r\nimport { changeInfo, getInfoByDate } from '../../covidSlice'\r\n\r\nexport default function Header() {\r\n    const dispatch = useDispatch();\r\n    const [countryISO, setCountryISO] = useState('Global');\r\n    const [countryName, setCountryName] = useState('');\r\n    const [allCountryInfos, setAllCountryInfos] = useState([]);\r\n\r\n    const getTodayInfo = () => {\r\n        axios.get('https://disease.sh/v3/covid-19/all')\r\n            .then(res => {\r\n                dispatch(changeInfo({\r\n                    today: {\r\n                        confirmed: res.data.todayCases,\r\n                        recovered: res.data.todayRecovered,\r\n                        deaths: res.data.todayDeaths,\r\n                    },\r\n                    total: {\r\n                        confirmed: res.data.cases,\r\n                        recovered: res.data.recovered,\r\n                        deaths: res.data.deaths,\r\n                    },\r\n                    country: 'all',\r\n                }));\r\n            })\r\n    }\r\n\r\n    const getAllCountryInfos = () => {\r\n        axios.get('https://disease.sh/v3/covid-19/countries?yesterday=true&twoDaysAgo=true&allowNull=0')\r\n            .then(res => {\r\n                let dataInfo = [];\r\n                res.data.forEach(item => {\r\n                    dataInfo.push({\r\n                        countryName: item.country,\r\n                        countryInfo: item.countryInfo,\r\n                        cases: item.cases,\r\n                        todayCases: item.todayCases,\r\n                        deaths: item.deaths,\r\n                        todayDeaths: item.todayDeaths,\r\n                        recovered: item.recovered,\r\n                        todayRecovered: item.todayRecovered,\r\n                    });\r\n                });\r\n                setAllCountryInfos(dataInfo);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n    const changeInfoDispatch = (country) => {\r\n        dispatch(changeInfo({\r\n            today: {\r\n                confirmed: country.todayCases,\r\n                recovered: country.todayRecovered,\r\n                deaths: country.todayDeaths,\r\n            },\r\n            total: {\r\n                confirmed: country.cases,\r\n                recovered: country.recovered,\r\n                deaths: country.deaths,\r\n            },\r\n            country: countryISO,\r\n        }));\r\n    }\r\n    const changeOption = (e) => {\r\n        setCountryISO(e.target.value);\r\n        setCountryName((allCountryInfos.find(info => e.target.value === info.countryInfo.iso2)));\r\n    }\r\n\r\n    const getInfoChart = (numbDate) => {\r\n        let iso = countryISO;\r\n        if (countryISO === 'Global') iso = 'all';\r\n        axios.get(`https://disease.sh/v3/covid-19/historical/${iso}?lastdays=${numbDate}`)\r\n            .then(res => {\r\n                let data = res.data.timeline;\r\n                if (iso === 'all') data = res.data;\r\n                let date = [];\r\n                let confirmed = [];\r\n                let recovered = [];\r\n                let deaths = [];\r\n                for (let i of Object.keys(data.cases)) {\r\n                    date.push(i);\r\n                    confirmed.push(data.cases[i])\r\n                }\r\n                for (let i of Object.keys(data.recovered))\r\n                    recovered.push(data.recovered[i])\r\n                for (let i of Object.keys(data.deaths))\r\n                    deaths.push(data.deaths[i])\r\n                dispatch(getInfoByDate({\r\n                    numbDate,\r\n                    date,\r\n                    confirmed,\r\n                    recovered,\r\n                    deaths,\r\n                }))\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n    useEffect(() => {\r\n        getAllCountryInfos();\r\n        countryISO !== 'Global' ? changeInfoDispatch(countryName) : getTodayInfo();\r\n        getInfoChart(20);\r\n    }, [countryName]);\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>COVID-19 TRACKER</h1>\r\n            <FormControl >\r\n                <Select value={countryISO} onChange={changeOption}>\r\n                    <MenuItem value={'Global'} >Global</MenuItem>\r\n                    {allCountryInfos.map((country, index) =>\r\n                        <MenuItem key={index} value={country.countryInfo.iso2} >{country.countryName}</MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n        </div >\r\n    )\r\n}","\r\nimport { useSelector } from \"react-redux\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport '../css/Chart.css';\r\n\r\n\r\n\r\nexport default function Chart() {\r\n    const { numbDate, date, recovered, confirmed, deaths } = useSelector(state => state.covid.infoByDate);\r\n\r\n    const dataChart = {\r\n        labels: date,\r\n        datasets: [\r\n            {\r\n                label: 'Recoverd',\r\n                data: recovered,\r\n                fill: false,\r\n                backgroundColor: 'rgb(0,255, 0)',\r\n                borderColor: 'rgba(0,255, 0)',\r\n            },\r\n            {\r\n                label: 'Confirmed',\r\n                data: confirmed,\r\n                fill: false,\r\n                backgroundColor: 'yellow',\r\n                borderColor: 'yellow',\r\n            },\r\n            {\r\n                label: 'Deaths',\r\n                data: deaths,\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 0, 0)',\r\n                borderColor: 'rgb(255, 0, 0)',\r\n            },\r\n        ],\r\n    };\r\n\r\n    const optionsChart = {\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                    },\r\n                    type: 'line',\r\n                    display: true,\r\n                    position: 'left',\r\n                },\r\n            ],\r\n        },\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: `COVID-19 ${numbDate} Days Stats`,\r\n                position: 'bottom',\r\n                fullSize: true,\r\n                color: 'black',\r\n                font: {\r\n                    size: 30,\r\n\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chart\" >\r\n            <Line data={dataChart} options={optionsChart} />\r\n        </div >\r\n    )\r\n}\r\n\r\n","import '../css/LeftSide.css'\r\nimport Card from './Card';\r\nimport Header from './Header';\r\nimport Chart from './Chart';\r\n\r\nexport default function LeftSide() {\r\n    return (\r\n        <div className=\"left-side\">\r\n            <Header />\r\n            <Card />\r\n            <Chart />\r\n        </div>\r\n\r\n    )\r\n}","import { FormControl, MenuItem, Select } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeOption } from '../../covidSlice';\r\nimport '../css/SortOptions.css';\r\n\r\n\r\nexport default function SortOptions() {\r\n    const changeSort = useDispatch();\r\n    const handleChangeSort = (e) => {\r\n        changeSort(changeOption({\r\n            option: e.target.value,\r\n        }));\r\n    }\r\n    return (\r\n        <div className=\"right-side__header\">\r\n            <h1>All country sort by</h1>\r\n            <FormControl>\r\n                <Select defaultValue=\"cases\" onChange={handleChangeSort}>\r\n                    <MenuItem value=\"cases\">Cases</MenuItem>\r\n                    <MenuItem value=\"deaths\" >Deaths</MenuItem>\r\n                    <MenuItem value=\"recovered\" >Recovered</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n","import \"../css/Country.css\";\r\n\r\nexport default function Country({ item }) {\r\n    return (\r\n        <div className=\"country\">\r\n            <div className=\"country__info\">\r\n                <img className=\"country__info--logo\" src={item.flag} alt='logo' />\r\n                <div className=\"country__info--name\"><strong>{item.country}</strong></div>\r\n            </div>\r\n            <div className=\"country__status\">\r\n                <div><span className=\"country__status--confirmed\">Confirmed:</span><strong> {item.confirmed}</strong></div>\r\n                <div><span className=\"country__status--recovered\">Recovered:</span><strong> {item.recovered}</strong></div>\r\n                <div><span className=\"country__status--deaths\">Deaths:</span><strong> {item.deaths}</strong></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import '../css/RightSide.css';\r\nimport SortOptions from './SortOptions';\r\nimport Country from './Country';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { changeListCountry } from '../../covidSlice';\r\n\r\nexport default function RightSide() {\r\n    const listCountry = useSelector(state => state.covid.listCountry);\r\n    const changeList = useDispatch();\r\n    const getListCountry = (options) => {\r\n        axios.get(`https://disease.sh/v3/covid-19/countries?sort=${options}`)\r\n            .then(res => {\r\n                const list = res.data.map((item) => {\r\n                    return {\r\n                        country: item.country,\r\n                        flag: item.countryInfo.flag,\r\n                        confirmed: item.cases,\r\n                        recovered: item.recovered,\r\n                        deaths: item.deaths,\r\n                    }\r\n                })\r\n                changeList(changeListCountry({\r\n                    country: list,\r\n                }))\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getListCountry(listCountry.options);\r\n    }, [listCountry.options]);\r\n\r\n    return (\r\n        <div className=\"right-side\">\r\n            <SortOptions />\r\n            <div className=\"list__country\">\r\n                {listCountry.country[0]?.map((info, index) =>\r\n                    <Country item={info} key={index} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// https://disease.sh/v3/covid-19/countries?sort=cases  deaths  recovered","import LeftSide from \"./components/LeftSide/LeftSide\";\r\nimport RightSide from \"./components/RightSide/RightSide\";\r\nimport './App.css'\r\n\r\nexport default function App() {\r\n    return (\r\n        <div className=\"main\">\r\n            <LeftSide />\r\n            <RightSide />\r\n        </div>\r\n    )\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport covidSlice from './covidSlice'\r\nconst store = configureStore({\r\n    reducer: {\r\n        covid: covidSlice,\r\n    },\r\n});\r\n\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}